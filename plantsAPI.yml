openapi: 3.0.2
servers:
  - url: /v3
info:
  description: |-
    A simple plants API for getting plant information and storing lists
    Some useful links:
    - [The plants API repository](https://github.com/darsys/plantsapi)
  version: 0.1.0
  title: The Plants API
  # termsOfService: 'http://swagger.io/terms/'
  contact:
    email: damon@ourcomputershop.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
# tags:
#   - name: plants
#     description: Everything about your plants
#     externalDocs:
#       description: Find out more
#       url: 'http://swagger.io'
#   - name: store
#     description: Operations about user
#   - name: user
#     description: Access to plantstore orders
#     externalDocs:
#       description: Find out more about our store
#       url: 'http://swagger.io'
paths:
  /plant:
    post:
      tags:
        - plant
      summary: Add a new plant to the store
      description: Add a new plant to the store
      operationId: addplant
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/plant'
            application/json:
              schema:
                $ref: '#/components/schemas/plant'
        '405':
          description: Invalid input
      security:
        - plantstore_auth:
            - 'write:plants'
            - 'read:plants'
      requestBody:
        description: Create a new plant in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plant'
          application/xml:
            schema:
              $ref: '#/components/schemas/plant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/plant'
    put:
      tags:
        - plant
      summary: Update an existing plant
      description: Update an existing plant by Id
      operationId: updateplant
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/plant'
            application/json:
              schema:
                $ref: '#/components/schemas/plant'
        '400':
          description: Invalid ID supplied
        '404':
          description: plant not found
        '405':
          description: Validation exception
      security:
        - plantstore_auth:
            - 'write:plants'
            - 'read:plants'
      requestBody:
        description: Update an existent plant in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plant'
          application/xml:
            schema:
              $ref: '#/components/schemas/plant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/plant'
  /plant/findByStatus:
    get:
      tags:
        - plant
      summary: Finds plants by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findplantsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/plant'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/plant'
        '400':
          description: Invalid status value
      security:
        - plantstore_auth:
            - 'write:plants'
            - 'read:plants'
  /plant/findByTags:
    get:
      tags:
        - plant
      summary: Finds plants by tags
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findplantsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/plant'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/plant'
        '400':
          description: Invalid tag value
      security:
        - plantstore_auth:
            - 'write:plants'
            - 'read:plants'
  '/plant/{plantId}':
    get:
      tags:
        - plant
      summary: Find plant by ID
      description: Returns a single plant
      operationId: getplantById
      parameters:
        - name: plantId
          in: path
          description: ID of plant to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/plant'
            application/json:
              schema:
                $ref: '#/components/schemas/plant'
        '400':
          description: Invalid ID supplied
        '404':
          description: plant not found
      security:
        - api_key: []
        - plantstore_auth:
            - 'write:plants'
            - 'read:plants'
    post:
      tags:
        - plant
      summary: Updates a plant in the store with form data
      description: ''
      operationId: updateplantWithForm
      parameters:
        - name: plantId
          in: path
          description: ID of plant that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of plant that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of plant that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - plantstore_auth:
            - 'write:plants'
            - 'read:plants'
    delete:
      tags:
        - plant
      summary: Deletes a plant
      description: ''
      operationId: deleteplant
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: plantId
          in: path
          description: plant id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid plant value
      security:
        - plantstore_auth:
            - 'write:plants'
            - 'read:plants'
  '/plant/{plantId}/uploadImage':
    post:
      tags:
        - plant
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: plantId
          in: path
          description: ID of plant to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - plantstore_auth:
            - 'write:plants'
            - 'read:plants'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns plant inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      x-swagger-router-controller: OrderController
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a plant
      description: Place a new order in the store
      operationId: placeOrder
      x-swagger-router-controller: OrderController
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      x-swagger-router-controller: OrderController
      description: >-
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      x-swagger-router-controller: OrderController
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: 'Creates list of users with given input array'
      x-swagger-router-controller: UserController
      operationId: createUsersWithListInput
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      x-swagger-router-controller: UserController
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
# externalDocs:
#   description: Find out more about Swagger
#   url: 'http://swagger.io'
components:
  schemas:
    Order:
      x-swagger-router-model: io.swagger.plantstore.model.Order
      properties:
        id:
          type: integer
          format: int64
          example: 10
        plantId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          example: approved
        complete:
          type: boolean
      xml:
        name: order
      type: object
    Customer:
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: JohnDoe
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          xml:
            wrapped: true
            name: addresses
      xml:
        name: customer
      type: object
    Address:
      properties:
        street:
          type: string
          example: 123 Main Street
        city:
          type: string
          example: Chicago
        state:
          type: string
          example: IL
        zip:
          type: string
          example: 90210
      xml:
        name: address
      type: object
    Category:
      x-swagger-router-model: io.swagger.plantstore.model.Category
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Grasses
      xml:
        name: category
      type: object
    User:
      x-swagger-router-model: io.swagger.plantstore.model.User
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 12345
        phone:
          type: string
          example: 12345
        userStatus:
          type: integer
          format: int32
          example: 1
          description: User Status
      xml:
        name: user
      type: object
    Tag:
      x-swagger-router-model: io.swagger.plantstore.model.Tag
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
      type: object
    plant:
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        status:
          type: string
          description: plant status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: plant
      type: object
    ApiResponse:
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
      type: object
    Plant:
      x-swagger-router-model: io.swagger.plantstore.model.plant
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 10
        created: 
          type: string
          format: date
          description: creation date
          example: "2021-01-30"
        lastUpdated:
          type: string
          format: date
          description: modified date
          example: "2021-01-30"
        latin_name:
          type: string
        common_name:
          type: array
          items:
            type: string
        description:
          type: string
        category:
          $ref: '#/components/schemas/plantCategory'
        price_per_oz:
          type: integer
        seeds_per_oz:
          type: integer
        germinationTypes:
          type: array
          items:
            $ref: '#/components/schemas/germinationType'
        lifecycle:
          $ref: '#/components/schemas/lifecycle'
        soils:
          type: array
          items:
            $ref: '#/components/schemas/soil'
        lights:
          type: array
          items:
            $ref: '#/components/schemas/light'
        moistures:
          type: array
          items:
            $ref: '#/components/schemas/moisture'
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
            xml:
              name: tag
    plantCategory:
     type: string
     enum:
        - Forb/Herb
        - Graminoid
        - Lichenous
        - Nonvascular
        - Shrub
        - Tree
        - Vine
    germinationType:
     type: object
     enum:        
        - id: A
          name: Easy
        - id: C30
          name: Stratify Cold 30 days
        - id: C60
          name: Stratify Cold 60 days
        - id: C90
          name: Stratify Cold 90 days
    lifecycle:
      type: string
      enum:
        - Annual
        - Biennial
        - Perennial
    soil:
      type: string
      enum:
        - Sand
        - Loam
        - Clay
    light:
      type: string
      enum:
        - Full
        - Partial
        - Shade
    moisture:
      type: string
      enum:
        - Wet
        - Medium-Wet
        - Medium
        - Medium-Dry
        - Dry
  
  requestBodies:
    plant:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/plant'
        application/xml:
          schema:
            $ref: '#/components/schemas/plant'
      description: plant object that needs to be added to the store
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
  securitySchemes:
    plantstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://plantstore.swagger.io/oauth/authorize'
          scopes:
            'write:plants': modify plants in your account
            'read:plants': read your plants
    api_key:
      type: apiKey
      name: api_key
      in: header